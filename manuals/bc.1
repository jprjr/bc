.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "BC" "1" "January 2019" "Gavin D. Howard" "General Commands Manual"
.
.SH "NAME"
\fBbc\fR \- arbitrary\-precision arithmetic language and calculator
.
.SH "SYNOPSIS"
\fBbc\fR [\fB\-hilqsvVw\fR] [\fB\-\-help\fR] [\fB\-\-interactive\fR] [\fB\-\-mathlib\fR] [\fB\-\-quiet\fR] [\fB\-\-standard\fR] [\fB\-\-warn\fR] [\fB\-\-version\fR] [\fB\-e\fR \fIexpr\fR] [\fB\-\-expression=\fR\fIexpr\fR\.\.\.] [\fB\-f\fR \fIfile\fR\.\.\.] [\fB\-file=\fR\fIfile\fR\.\.\.] [\fIfile\fR\.\.\.]
.
.SH "DESCRIPTION"
bc(1) is an interactive processor for a language first standardized in 1991 by POSIX\. (The current standard is here \fIhttps://pubs\.opengroup\.org/onlinepubs/9699919799/utilities/bc\.html\fR\.) The language provides unlimited precision decimal arithmetic and is somewhat C\-like, but there are differences\. Such differences will be noted in this document\.
.
.P
After parsing and handling options, this bc(1) reads any files given on the command line and executes them before reading from \fBstdin\fR\.
.
.P
With all build options but extra math enabled this bc(1) is a drop\-in replacement for \fB\fIany\fR\fR bc(1), including (and especially) the GNU bc(1)\.
.
.SH "OPTIONS"
The following are the options that bc(1) accepts\.
.
.TP
\fB\-h\fR, \fB\-\-help\fR
Prints a usage message and quits\.
.
.TP
\fB\-i\fR, \fB\-\-interactive\fR
Forces interactive mode\.
.
.IP
Per the standard \fIhttps://pubs\.opengroup\.org/onlinepubs/9699919799/utilities/bc\.html\fR, bc(1) has an interactive mode and a non\-interactive mode\. The interactive mode is turned on automatically when both \fBstdin\fR and \fBstdout\fR are hooked to a terminal, but this flag can turn it on in other cases\. In interactive mode, bc(1) attempts to recover from errors and flushes \fBstdout\fR as soon as execution is done for the current input\.
.
.TP
\fB\-l\fR, \fB\-\-mathlib\fR
Sets \fBscale\fR (see the Scale section) to \fB20\fR and loads the included math library before running any code, including any expressions or files specified on the command line\.
.
.IP
To learn what is in the library, see the \fILibrary\fR section\.
.
.TP
\fB\-q\fR, \fB\-\-quiet\fR
Do not print copyright header\. bc(1) will also suppress the header in non\-interactive mode\.
.
.IP
This is mostly for compatibility with the GNU bc(1) \fIhttps://www\.gnu\.org/software/bc/\fR\.
.
.TP
\fB\-s\fR, \fB\-\-standard\fR
Process exactly the language defined by the standard \fIhttps://pubs\.opengroup\.org/onlinepubs/9699919799/utilities/bc\.html\fR and error if any extensions are used\.
.
.TP
\fB\-v\fR, \fB\-V\fR, \fB\-\-version\fR
Print the version information (copyright header) and exit\.
.
.TP
\fB\-w\fR, \fB\-\-warn\fR
Like \fB\-s\fR and \fB\-\-standard\fR, except that warnings (and not errors) are given for non\-standard extensions\.
.
.TP
\fB\-e\fR \fIexpr\fR, \fB\-\-expression\fR=\fIexpr\fR
Evaluates \fBexpr\fR\. If multiple expressions are given, they are evaluated in order\. If files are given as well (see below), the expressions and files are evaluated in the order given\. This means that if a file is given before an expression, the file is read in and evaluated first\.
.
.TP
\fB\-f\fR \fIfile\fR, \fB\-\-file\fR=\fIfile\fR
Reads in \fBfile\fR and evaluates it\. If expressions are also given (see above), the expressions are evaluated in the order given\.
.
.SH "SYNTAX"
The syntax for bc(1) programs is mostly C\-like, with some differences\. This bc(1) follows the POSIX standard \fIhttps://pubs\.opengroup\.org/onlinepubs/9699919799/utilities/bc\.html\fR, which is a much more thorough resource for the language this bc(1) accepts\. This section is meant to be a summary and a listing of all the extensions to the standard \fIhttps://pubs\.opengroup\.org/onlinepubs/9699919799/utilities/bc\.html\fR\.
.
.P
In the sections below, \fBE\fR means expression, \fBS\fR means statement, and \fBI\fR means identifier
.
.P
Identifiers (\fBI\fR) start with a lowercase letter and can be followed by any number (up to \fBBC_NAME_MAX\-1\fR) of lowercase letters (\fBa\-z\fR), digits (\fB0\-9\fR), and underscores (\fB_\fR)\. The regex is \fB[a\-z][a\-z0\-9_]*\fR Identifiers with more than one character (letter) are an extension\.
.
.P
\fBibase\fR is a global variable determining how to interpret constant numbers\. It is the "input" base, or the number base used for interpreting input numbers\. \fBibase\fR is initially \fB10\fR\. If the \fB\-s\fR (\fB\-\-standard\fR) and \fB\-w\fR (\fB\-\-warn\fR) flags were not given on the command line, the max allowable value for \fBibase\fR is \fB36\fR\. Otherwise, it is \fB16\fR\. The min allowable value for \fBibase\fR is \fB2\fR\.
.
.P
\fBobase\fR is a global variable determining how to output results\. It is the "output" base, or the number base used for outputting numbers\. \fBobase\fR is initially \fB10\fR\. The max allowable value for \fBobase\fR is \fBBC_BASE_MAX\fR\. The min allowable value for \fBobase\fR is \fB2\fR\.
.
.P
The \fBscale\fR of an expression is the number of digits in the result of the expression right of the decimal point, and \fBscale\fR is a global variable that sets the precision of any operations, with exceptions\. \fBscale\fR is initially \fB0\fR\. \fBscale\fR cannot be negative\.
.
.P
bc(1) has both \fBglobal\fR variables and \fBlocal\fR variables\. All \fBlocal\fR variables are local to the function; they are parameters or are introduced in a function\'s \fBauto\fR list (see \fIFunctions\fR)\. If a variable is accessed which is not a parameter or in the \fBauto\fR list, it is assumed to be \fBglobal\fR\. If a parent function has a \fBlocal\fR variable version of a \fBglobal\fR variable that is accessed by a function that it calls, the value of that \fBglobal\fR variable in the child function is the value of the variable in the parent function, not the value of the actual \fBglobal\fR variable\.
.
.P
All of the above applies to arrays as well\.
.
.P
The value of a statement that is an expression (i\.e\., any of the \fINamed Expressions\fR or \fIOperands\fR) is printed unless the lowest precedence operator is an \fI\fBassignment\fR\fR operator \fB\fIand\fR\fR the expression is not surrounded by parentheses\. The value that is printed is also assigned to the special variable \fBlast\fR\. This is a non\-portable extension\. A single dot may also be used as a synonym for \fBlast\fR\.
.
.P
Either semicolons or newlines may separate statements\.
.
.SS "Comments"
There are two kinds of comments:
.
.IP "1." 4
Block comments are enclosed in \fB/*\fR and \fB*/\fR\.
.
.IP "2." 4
Line comments go from \fB#\fR until, and not including, the next newline\. This is a non\-portable extension\.
.
.IP "" 0
.
.P
 \fI\fR
.
.SS "Named Expressions"
.
.IP "1." 4
Variables: \fBI\fR
.
.IP "2." 4
Array Elements: \fBI[E]\fR
.
.IP "3." 4
\fBibase\fR
.
.IP "4." 4
\fBobase\fR
.
.IP "5." 4
\fBscale\fR
.
.IP "6." 4
\fBlast\fR or a single dot (\fB\.\fR)
.
.IP "" 0
.
.P
Variables and arrays do not interfere; users can have arrays named the same as variables\. This also applies to \fIfunctions\fR, so a user can have a variable, array, and function that all have the same name\.
.
.P
Named expressions are required as the operand of \fI\fBincrement\fR/\fBdecrement\fR operators\fR and as the left side of \fI\fBassignment\fR operators\fR\.
.
.P
 \fI\fR
.
.SS "Operands"
.
.IP "1." 4
Numbers (see \fINumbers\fR below)\.
.
.IP "2." 4
\fB(E)\fR: The value of \fBE\fR (used to change precedence)\.
.
.IP "3." 4
\fBsqrt(E)\fR: The square root of \fBE\fR\.
.
.IP "4." 4
\fBlength(E)\fR: The number of significant decimal digits in \fBE\fR\.
.
.IP "5." 4
\fBlength(I[])\fR: The number of elements in the array \fBI\fR\. This is a non\-portable extension\.
.
.IP "6." 4
\fBscale(E)\fR: \fBE\fR\'s \fBscale\fR\.
.
.IP "7." 4
\fBabs(E)\fR: The absolute value of \fBE\fR\. This is a non\-portable extension\.
.
.IP "" 0
.
.P
 \fI\fR
.
.SS "Numbers"
Numbers are strings made up of digits, uppercase letters, and at most \fB1\fR period for a radix\. Numbers can have up to \fBBC_NUM_MAX\fR digits\. Uppercase letters equal \fB9\fR + their position in the alphabet (i\.e\., \fBA\fR equals \fB10\fR, or \fB9 + 1\fR)\. If a digit or letter makes no sense with the current value of \fBibase\fR, they are set to the value of the highest valid digit in \fBibase\fR\.
.
.P
Single\-character numbers (i\.e\., \fBA\fR) take the value that they would have if they were valid digits, regardless of the value of \fBibase\fR\. This means that \fBA\fR always equals decimal \fB10\fR and \fBZ\fR always equals decimal \fB35\fR\.
.
.SS "Operators"
The following arithmetic and logical operators can be used\. They are listed in order of decreasing precedence\. Operators in the same group have the same precedence\.
.
.TP
\fB++\fR \fB\-\-\fR
Type: Prefix and Postfix
.
.IP
Associativity: None
.
.IP
Description: \fBincrement\fR, \fBdecrement\fR
.
.TP
\fB\-\fR \fB!\fR
Type: Prefix
.
.IP
Associativity: None
.
.IP
Description: \fBnegation\fR, \fBboolean not\fR
.
.TP
\fB$\fR
Type: Postfix
.
.IP
Associativity: None
.
.IP
Description: \fBtruncation\fR
.
.TP
\fB@\fR
Type: Binary
.
.IP
Associativity: Right
.
.IP
Description: \fBset precision\fR
.
.TP
\fB^\fR
Type: Binary
.
.IP
Associativity: Right
.
.IP
Description: \fBpower\fR
.
.TP
\fB*\fR \fB/\fR \fB%\fR
Type: Binary
.
.IP
Associativity: Left
.
.IP
Description: \fBmultiply\fR, \fBdivide\fR, \fBmodulus\fR
.
.TP
\fB+\fR \fB\-\fR
Type: Binary
.
.IP
Associativity: Left
.
.IP
Description: \fBadd\fR, \fBsubtract\fR
.
.TP
\fB<<\fR \fB>>\fR
Type: Binary
.
.IP
Associativity: Left
.
.IP
Description: \fBshift left\fR, \fBshift right\fR
.
.TP
\fB=\fR \fB<<=\fR \fB>>=\fR \fB+=\fR \fB\-=\fR \fB*=\fR \fB/=\fR \fB%=\fR \fB^=\fR \fB@=\fR
Type: Binary
.
.IP
Associativity: Right
.
.IP
Description: \fBassignment\fR
.
.TP
\fB==\fR \fB<=\fR \fB>=\fR \fB!=\fR \fB<\fR \fB>\fR
Type: Binary
.
.IP
Associativity: Left
.
.IP
Description: \fBrelational\fR
.
.TP
\fB&&\fR
Type: Binary
.
.IP
Associativity: Left
.
.IP
Description: \fBboolean and\fR
.
.TP
\fB||\fR
Type: Binary
.
.IP
Associativity: Left
.
.IP
Description: \fBboolean or\fR
.
.P
The operators will be described in more detail below\.
.
.P
 \fI\fR
.
.TP
\fB++\fR \fB\-\-\fR
The prefix and postfix \fBincrement\fR and \fBdecrement\fR operators behave exactly like they would in C\. They require a \fInamed expression\fR as an operand\.
.
.TP
\fB\-\fR
The \fBnegation\fR operator returns \fB0\fR if a user attempts to negate any expression with the value \fB0\fR\. Otherwise, a copy of the expression with its sign flipped is returned\.
.
.TP
\fB!\fR
The \fBboolean not\fR operator returns \fB1\fR if the expression is \fB0\fR, or \fB0\fR otherwise\.
.
.IP
This is a non\-portable extension\.
.
.TP
\fB$\fR
The \fBtruncation\fR operator returns a copy of the given expression with all of its \fBscale\fR removed\.
.
.IP
This is a non\-portable extension\.
.
.IP
This is only available if bc(1) has been compiled with the extra math option enabled\.
.
.TP
\fB@\fR
The \fBset precision\fR operator takes two expressions and returns a copy of the first with its \fBscale\fR equal to the value of the second expression\. That could either mean that the number is returned without change (if the first expression\'s \fBscale\fR matches the value of the second expression), extended (if it is less), or truncated (if it is more)\.
.
.IP
The second expression must be an integer (no \fBscale\fR) and non\-negative\.
.
.IP
This is a non\-portable extension\.
.
.IP
This is only available if bc(1) has been compiled with the extra math option enabled\.
.
.TP
\fB^\fR
The \fBpower\fR operator (not the \fBexclusive or\fR operator, as it would be in C) takes two expressions and raises the first to the power of the value of the second\.
.
.IP
The second expression must be an integer (no \fBscale\fR)\.
.
.TP
\fB*\fR
The \fBmultiply\fR operator takes two expressions, multiplies them, and returns the product\. If \fBa\fR is the \fBscale\fR of the first expression and \fBb\fR is the \fBscale\fR of the second expression, the scale of the result is equal to \fBmin(a+b,max(scale,a,b))\fR where \fBmin\fR and \fBmax\fR return the obvious values\.
.
.TP
\fB/\fR
The \fBdivide\fR operator takes two expressions, divides them, and returns the quotient\. The scale of the result shall be the value of \fBscale\fR\.
.
.TP
\fB%\fR
The \fBmodulus\fR operator takes two expressions, \fBa\fR and \fBb\fR, and evaluates them by 1) Computing \fBa/b\fR to current \fBscale\fR and 2) Using the result of step 1 to calculate \fBa\-(a/b)*b\fR to scale \fBmax(scale+scale(b),scale(a))\fR\.
.
.TP
\fB+\fR
The \fBadd\fR operator takes two expressions, \fBa\fR and \fBb\fR, and returns the sum, with a \fBscale\fR equal to the max of the \fBscale\fRs of \fBa\fR and \fBb\fR\.
.
.TP
\fB\-\fR
The \fBsubtract\fR operator takes two expressions, \fBa\fR and \fBb\fR, and returns the difference, with a \fBscale\fR equal to the max of the \fBscale\fRs of \fBa\fR and \fBb\fR\.
.
.TP
\fB<<\fR
The \fBleft shift\fR operator takes two expressions, \fBa\fR and \fBb\fR, and returns a copy of the value of \fBa\fR with its decimal point moved \fBb\fR places to the right\.
.
.IP
The second expression must be an integer (no \fBscale\fR) and non\-negative\.
.
.IP
This is a non\-portable extension\.
.
.IP
This is only available if bc(1) has been compiled with the extra math option enabled\.
.
.TP
\fB>>\fR
The \fBright shift\fR operator takes two expressions, \fBa\fR and \fBb\fR, and returns a copy of the value of \fBa\fR with its decimal point moved \fBb\fR places to the left\.
.
.IP
The second expression must be an integer (no \fBscale\fR) and non\-negative\.
.
.IP
This is a non\-portable extension\.
.
.IP
This is only available if bc(1) has been compiled with the extra math option enabled\.
.
.P
 \fI\fR
.
.TP
\fB=\fR \fB<<=\fR \fB>>=\fR \fB+=\fR \fB\-=\fR \fB*=\fR \fB/=\fR \fB%=\fR \fB^=\fR \fB@=\fR
The \fBassignment\fR operators take two expressions, \fBa\fR and \fBb\fR where \fBa\fR is a \fInamed expression\fR\.
.
.IP
For \fB=\fR, \fBb\fR is copied and the result is assigned to \fBa\fR\. For all others, \fBa\fR and \fBb\fR are applied as operands to the corresponding arithmetic operator and the result is assigned to \fBa\fR\.
.
.IP
The \fBassignment\fR operators that correspond to operators that are extensions are themselves extensions\.
.
.IP
Also, those \fBassignment\fR operators that are extensions are only available if bc(1) has been compiled with the extra math option enabled\.
.
.TP
\fB==\fR \fB<=\fR \fB>=\fR \fB!=\fR \fB<\fR \fB>\fR
The \fBrelational\fR operators compare two expressions, \fBa\fR and \fBb\fR, and if the relation holds, according to C language semantics, the result is \fB1\fR\. Otherwise, it is \fB0\fR\.
.
.IP
Note that unlike in C, these operators have a lower precedence than the \fBassignment\fR operators, which means that \fBa=b>c\fR is interpreted as \fB(a=b)>c\fR\.
.
.IP
Also, unlike the standard \fIhttps://pubs\.opengroup\.org/onlinepubs/9699919799/utilities/bc\.html\fR requires, these operators can appear anywhere any other expressions can be used\. This allowance is an extension\.
.
.TP
\fB&&\fR
The \fBboolean and\fR operator takes two expressions and returns \fB1\fR if both expressions are non\-zero, \fB0\fR otherwise\.
.
.IP
This is \fB\fInot\fR\fR a short\-circuit operator\.
.
.IP
This is a non\-portable extension\.
.
.TP
\fB||\fR
The \fBboolean or\fR operator takes two expressions and returns \fB1\fR if one of the expressions is non\-zero, \fB0\fR otherwise\.
.
.IP
This is \fB\fInot\fR\fR a short\-circuit operator\.
.
.IP
This is a non\-portable extension\.
.
.SS "Statements"
The following items are statements:
.
.IP "1." 4
\fBE\fR
.
.IP "2." 4
\fB{\fR \fBS\fR \fB;\fR \.\.\. \fB;\fR \fBS\fR \fB}\fR
.
.IP "3." 4
\fBif\fR \fB(\fR \fBE\fR \fB)\fR \fBS\fR
.
.IP "4." 4
\fBif\fR \fB(\fR \fBE\fR \fB)\fR \fBS\fR \fBelse\fR \fBS\fR
.
.IP "5." 4
\fBwhile\fR \fB(\fR \fBE\fR \fB)\fR \fBS\fR
.
.IP "6." 4
\fBfor\fR \fB(\fR \fBE\fR \fB;\fR \fBE\fR \fB;\fR \fBE\fR \fB)\fR \fBS\fR
.
.IP "7." 4
An empty statement
.
.IP "8." 4
\fBbreak\fR
.
.IP "9." 4
\fBcontinue\fR
.
.IP "10." 4
\fBquit\fR
.
.IP "11." 4
\fBhalt\fR
.
.IP "12." 4
\fBlimits\fR
.
.IP "13." 4
A string of characters, enclosed in double quotes
.
.IP "14." 4
\fBprint\fR \fBE\fR \fB,\fR \.\.\. \fB,\fR \fBE\fR
.
.IP "" 0
.
.P
Numbers 4, 9, 11, 12, and 14 are extensions\.
.
.P
Also, as an extension, any or all of the expressions in the header of a for loop may be omitted\. If the condition (second expression) is omitted, it is assumed to be a constant \fB1\fR\.
.
.P
The \fBbreak\fR statement causes a loop to stop iterating and resume execution immediately following a loop\. This is only allowed in loops\.
.
.P
The \fBcontinue\fR statement causes a loop iteration to stop early and returns to the start of the loop, including testing the loop condition\. This is only allowed in loops\.
.
.P
The \fBif\fR \fBelse\fR statement does the same thing as in C\.
.
.P
The \fBquit\fR statement causes bc(1) to quit, even if it is on a branch that will not be executed (it is a compile\-time command)\.
.
.P
The \fBhalt\fR statement causes bc(1) to quit, if it is executed\. (Unlike \fBquit\fR if it is on a branch of an \fBif\fR statement that is not executed, bc(1) does not quit\.)
.
.P
The \fBlimits\fR statement prints the limits that this bc(1) is subject to\. This is like the \fBquit\fR statement in that it is a compile\-time command\.
.
.SS "Print Statement"
The "expressions" in a \fBprint\fR statement may also be strings\. If they are, there are backslash escape sequences that are interpreted specially\. What those sequences are, and what they cause to be printed, are shown below:
.
.TP
\fB\ea\fR
\fB\ea\fR
.
.TP
\fB\eb\fR
\fB\eb\fR
.
.TP
\fB\e\e\fR
\fB\e\fR
.
.TP
\fB\ee\fR
\fB\e\fR
.
.TP
\fB\ef\fR
\fB\ef\fR
.
.TP
\fB\en\fR
\fB\en\fR
.
.TP
\fB\eq\fR
\fB"\fR
.
.TP
\fB\er\fR
\fB\er\fR
.
.TP
\fB\et\fR
\fB\et\fR
.
.P
Any other character following a backslash causes the backslash and character to be printed as\-is\.
.
.P
Any non\-string expression in a print statement shall be assigned to \fBlast\fR, like any other expression that is printed\.
.
.SH "FUNCTIONS"
Function definitions follow what is required by the bc spec:
.
.IP "" 4
.
.nf

define I(I,\.\.\.,I){
    auto I,\.\.\.,I
    S;\.\.\.;S
    return(E)
}
.
.fi
.
.IP "" 0
.
.P
Any \fBI\fR in the parameter list or \fBauto\fR list may be replaced with \fBI[]\fR to make a parameter or \fBauto\fR var an array\.
.
.P
As a non\-portable extension, the opening brace of a \fBdefine\fR statement may appear on the next line\.
.
.P
The return statement may also be in the following forms:
.
.IP "1." 4
\fBreturn\fR
.
.IP "2." 4
\fBreturn\fR \fB(\fR \fB)\fR
.
.IP "3." 4
\fBreturn\fR \fBE\fR
.
.IP "" 0
.
.P
The first two, or not specifying a \fBreturn\fR statement, is equivalent to \fBreturn (0)\fR\.
.
.P
 \fI\fR
.
.SS "Void Functions"
Functions can also be void functions, defined as follows:
.
.IP "" 4
.
.nf

define void I(I,\.\.\.,I){
    auto I,\.\.\.,I
    S;\.\.\.;S
    return(E)
}
.
.fi
.
.IP "" 0
.
.P
They can only be used as standalone expressions, where such an expression would be printed alone, except in a print statement\.
.
.P
Void functions can only use the first two \fBreturn\fR statements listed above\.
.
.P
The word \fBvoid\fR is not treated as a keyword; it is still possible to have variables, arrays, and functions named \fBvoid\fR\.
.
.P
This is a non\-portable extension\.
.
.SS "Array References"
For any array in the parameter list, if the array is declared in the form
.
.IP "" 4
.
.nf

*I[]
.
.fi
.
.IP "" 0
.
.P
it is a \fBreference\fR\. Any changes to the array in the function are reflected when the function returns to the array that was passed in\.
.
.P
Other than this, all function arguments are passed by value\.
.
.P
This is a non\-portable extension\.
.
.P
This is only available if bc(1) has been compiled with the array references option enabled\.
.
.SH "LIBRARY"
All of the functions below, including the functions in the \fIextended library\fR if bc(1) has been compiled with the extra math option enabled, are available when the \fB\-l\fR or \fB\-\-mathlib\fR command\-line flags are given\.
.
.P
 \fI\fR
.
.SS "Standard Library"
The standard \fIhttps://pubs\.opengroup\.org/onlinepubs/9699919799/utilities/bc\.html\fR defines the following functions for the math library:
.
.TP
\fBs(x)\fR
Returns the sine of \fBx\fR, which is assumed to be in radians\.
.
.IP
This is a \fItranscendental function\fR\.
.
.TP
\fBc(x)\fR
Returns the cosine of \fBx\fR, which is assumed to be in radians\.
.
.IP
This is a \fItranscendental function\fR\.
.
.TP
\fBa(x)\fR
Returns the arctangent of \fBx\fR, in radians\.
.
.IP
This is a \fItranscendental function\fR\.
.
.TP
\fBl(x)\fR
Returns the natural logarithm of \fBx\fR\.
.
.IP
This is a \fItranscendental function\fR\.
.
.TP
\fBe(x)\fR
Returns the mathematical constant \fBe\fR raised to the power of \fBx\fR\.
.
.IP
This is a \fItranscendental function\fR\.
.
.TP
\fBj(x, n)\fR
Returns the bessel integer order \fBn\fR (truncated) of \fBx\fR\.
.
.IP
This is a \fItranscendental function\fR\.
.
.P
 \fI\fR
.
.SS "Extended Library"
In addition to the \fIstandard library\fR, if bc(1) has been built with the extra math option, the following functions are available when either the \fB\-l\fR or \fB\-\-mathlib\fR options are given\.
.
.P
However, the extended library is \fB\fInot\fR\fR loaded when the \fB\-s\fR/\fB\-\-standard\fR or \fB\-w\fR/\fB\-\-warn\fR options are given since they are not part of the library defined by the standard \fIhttps://pubs\.opengroup\.org/onlinepubs/9699919799/utilities/bc\.html\fR\.
.
.TP
\fBr(x, p)\fR
Returns \fBx\fR rounded to \fBp\fR decimal places according to the rounding mode round half away from \fB0\fR \fIhttps://en\.wikipedia\.org/wiki/Rounding#Round_half_away_from_zero\fR\.
.
.TP
\fBf(x)\fR
Returns the factorial of the truncated absolute value of \fBx\fR\.
.
.TP
\fBperm(n, k)\fR
Returns the permutation of the truncated absolute value of \fBn\fR of the truncated absolute value of \fBk\fR, if \fBk <= n\fR\. If not, it returns \fB0\fR\.
.
.TP
\fBcomb(n, k)\fR
Returns the combination of the truncated absolute value of \fBn\fR of the truncated absolute value of \fBk\fR, if \fBk <= n\fR\. If not, it returns \fB0\fR\.
.
.TP
\fBl2(x)\fR
Returns the logarithm base \fB2\fR of \fBx\fR\.
.
.IP
This is a \fItranscendental function\fR\.
.
.TP
\fBl10(x)\fR
Returns the logarithm base \fB10\fR of \fBx\fR\.
.
.IP
This is a \fItranscendental function\fR\.
.
.TP
\fBlog(x, b)\fR
Returns the logarithm base \fBb\fR of \fBx\fR\.
.
.IP
This is a \fItranscendental function\fR\.
.
.TP
\fBpi(p)\fR
Returns \fBpi\fR to \fBp\fR decimal places\.
.
.IP
This is a \fItranscendental function\fR\.
.
.TP
\fBubytes(x)\fR
Returns the numbers of unsigned integer bytes required to hold the truncated absolute value of \fBx\fR\.
.
.TP
\fBsbytes(x)\fR
Returns the numbers of signed, two\'s\-complement integer bytes required to hold the truncated value of \fBx\fR\.
.
.TP
\fBhex(x)\fR
Outputs the hexadecimal (base \fB16\fR) representation of \fBx\fR\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBbinary(x)\fR
Outputs the binary (base \fB2\fR) representation of \fBx\fR\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBoutput(x, b)\fR
Outputs the base \fBb\fR representation of \fBx\fR\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBuint(x)\fR
Outputs the representation, in binary and hexadecimal, of \fBx\fR as an unsigned integer in as few power of two bytes as possible\. Both outputs are split into bytes separated by spaces\.
.
.IP
If \fBx\fR is not an integer or is negative, an error message is printed instead\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBint(x)\fR
Outputs the representation, in binary and hexadecimal, of \fBx\fR as a signed, two\'s\-complement integer in as few power of two bytes as possible\. Both outputs are split into bytes separated by spaces\.
.
.IP
If \fBx\fR is not an integer, an error message is printed instead\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBuintn(x, n)\fR
Outputs the representation, in binary and hexadecimal, of \fBx\fR as an unsigned integer in \fBn\fR bytes\. Both outputs are split into bytes separated by spaces\.
.
.IP
If \fBx\fR is not an integer, is negative, or cannot fit into \fBn\fR bytes, an error message is printed instead\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBintn(x, n)\fR
Outputs the representation, in binary and hexadecimal, of \fBx\fR as a signed, two\'s\-complement integer in \fBn\fR bytes\. Both outputs are split into bytes separated by spaces\.
.
.IP
If \fBx\fR is not an integer or cannot fit into \fBn\fR bytes, an error message is printed instead\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBuint8(x)\fR
Outputs the representation, in binary and hexadecimal, of \fBx\fR as an unsigned integer in \fB1\fR byte\. Both outputs are split into bytes separated by spaces\.
.
.IP
If \fBx\fR is not an integer, is negative, or cannot fit into \fB1\fR byte, an error message is printed instead\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBint8(x)\fR
Outputs the representation, in binary and hexadecimal, of \fBx\fR as a signed, two\'s\-complement integer in \fB1\fR byte\. Both outputs are split into bytes separated by spaces\.
.
.IP
If \fBx\fR is not an integer or cannot fit into \fB1\fR byte, an error message is printed instead\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBuint16(x)\fR
Outputs the representation, in binary and hexadecimal, of \fBx\fR as an unsigned integer in \fB2\fR bytes\. Both outputs are split into bytes separated by spaces\.
.
.IP
If \fBx\fR is not an integer, is negative, or cannot fit into \fB2\fR bytes, an error message is printed instead\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBint16(x)\fR
Outputs the representation, in binary and hexadecimal, of \fBx\fR as a signed, two\'s\-complement integer in \fB2\fR bytes\. Both outputs are split into bytes separated by spaces\.
.
.IP
If \fBx\fR is not an integer or cannot fit into \fB2\fR bytes, an error message is printed instead\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBuint32(x)\fR
Outputs the representation, in binary and hexadecimal, of \fBx\fR as an unsigned integer in \fB4\fR bytes\. Both outputs are split into bytes separated by spaces\.
.
.IP
If \fBx\fR is not an integer, is negative, or cannot fit into \fB4\fR bytes, an error message is printed instead\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBint32(x)\fR
Outputs the representation, in binary and hexadecimal, of \fBx\fR as a signed, two\'s\-complement integer in \fB4\fR bytes\. Both outputs are split into bytes separated by spaces\.
.
.IP
If \fBx\fR is not an integer or cannot fit into \fB4\fR bytes, an error message is printed instead\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBuint64(x)\fR
Outputs the representation, in binary and hexadecimal, of \fBx\fR as an unsigned integer in \fB8\fR bytes\. Both outputs are split into bytes separated by spaces\.
.
.IP
If \fBx\fR is not an integer, is negative, or cannot fit into \fB8\fR bytes, an error message is printed instead\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBint64(x)\fR
Outputs the representation, in binary and hexadecimal, of \fBx\fR as a signed, two\'s\-complement integer in \fB8\fR bytes\. Both outputs are split into bytes separated by spaces\.
.
.IP
If \fBx\fR is not an integer or cannot fit into \fB8\fR bytes, an error message is printed instead\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBhex_uint(x, n)\fR
Outputs the representation of the truncated absolute value of \fBx\fR as an unsigned integer in hexadecimal using \fBn\fR bytes\. Not all of the value will be output if \fBn\fR is too small\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBbinary_uint(x, n)\fR
Outputs the representation of the truncated absolute value of \fBx\fR as an unsigned integer in binary using \fBn\fR bytes\. Not all of the value will be output if \fBn\fR is too small\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBoutput_uint(x, n)\fR
Outputs the representation of the truncated absolute value of \fBx\fR as an unsigned integer in the current \fI\fBobase\fR\fR using \fBn\fR bytes\. Not all of the value will be output if \fBn\fR is too small\.
.
.IP
This is a \fIvoid\fR function\.
.
.TP
\fBoutput_byte(x, i)\fR
Outputs byte \fBi\fR of the truncated absolute value of \fBx\fR, where \fB0\fR is the least significant byte and \fBnumber_of_bytes \- 1\fR is the most significant byte\.
.
.IP
This is a \fIvoid\fR function\.
.
.P
 \fI\fR
.
.SS "Transcendental Functions"
All transcendental functions can return slightly inaccurate results (up to 1 ULP \fIhttps://en\.wikipedia\.org/wiki/Unit_in_the_last_place\fR)\. This is unavoidable, and this article \fIhttps://people\.eecs\.berkeley\.edu/~wkahan/LOG10HAF\.TXT\fR explains why it is impossible and unnecessary to calculate exact results for the transcendental functions\.
.
.P
Because of the possible inaccuracy, I recommend that users call those functions with the precision (\fBscale\fR) set to at least 1 higher than is necessary\. If exact results are \fIabsolutely\fR required, users can double the precision (\fBscale\fR) and then truncate\.
.
.P
The transcendental functions in the standard math library are:
.
.IP "\(bu" 4
\fBs(x)\fR
.
.IP "\(bu" 4
\fBc(x)\fR
.
.IP "\(bu" 4
\fBa(x)\fR
.
.IP "\(bu" 4
\fBl(x)\fR
.
.IP "\(bu" 4
\fBe(x)\fR
.
.IP "\(bu" 4
\fBj(x, n)\fR
.
.IP "" 0
.
.P
The transcendental functions in the extended math library are:
.
.IP "\(bu" 4
\fBl2(x)\fR
.
.IP "\(bu" 4
\fBl10(x)\fR
.
.IP "\(bu" 4
\fBlog(x, b)\fR
.
.IP "\(bu" 4
\fBpi(p)\fR
.
.IP "" 0
.
.SH "SIGNAL HANDLING"
If bc(1) has been compiled with the signal handling, sending a \fBSIGINT\fR will cause bc(1) to stop execution of the current input and reset, asking for more input\.
.
.P
Otherwise, any signals cause bc(1) to exit\.
.
.SH "COMMAND LINE HISTORY"
bc(1) supports interactive command\-line editing, if compiled with the history option enabled\. If \fBstdin\fR is hooked to a terminal, it is enabled\. Previous lines can be recalled and edited with the arrow keys\.
.
.SH "SEE ALSO"
dc(1)
.
.SH "STANDARDS"
bc(1) is compliant with the IEEE Std 1003\.1\-2017 (“POSIX\.1\-2017”) \fIhttps://pubs\.opengroup\.org/onlinepubs/9699919799/utilities/bc\.html\fR specification\. The flags \fB\-efhiqsvVw\fR, all long options, and the extensions noted above are extensions to that specification\.
.
.SH "AUTHOR"
This bc(1) was made from scratch by Gavin D\. Howard\.
.
.SH "BUGS"
None are known\. Report bugs at https://github\.com/gavinhoward/bc\.
